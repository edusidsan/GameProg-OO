################################################################################################
GIT
################################################################################################

# Verifica os status do diretório
git status

# Adicionar os arquivos do Branch (ramo) no principal. git help add
git add .

# Configuração de email do usuário
git config user.email " "
git config user.name " "

# Registro do modificação feita no diretório
git commit -m "commit"

# Config do repositório central com o nome "origin"
git remote add origin https://github.com/edusidsan/GameProg-OO.git

# Verifica o endereço do remote
git remote -v

# Envio para repositório central
git push -u origin master

# Verificação de todos os ramos existentes no projeto
git branch

# Criação de novo ramo (Branch)
git branch develop

# Mudar para novo ramo (Branch)
git checkout develop

# Envio para repositório central no branch especificado
git push -u origin develop

# Comparação de arquivos via terminal (7 caracteres iniciais do hash)
git log

# Mesclar ramos
git checkout master
git merge develop
git push -u origin master

# Excluir ramo
git branch -d develop
git push origin --delete develop

# Descartar alterações feitas no branch
git checkout -- <nome do arquivo>

# Esconder alterações / guardar em um arquivo para usar outra branch naquele momento e depois voltar pro mesmo lugar
git stash
# Encontrar alterações escondidas
git stash list
# Aplicar as alterações que estão escondidas
git stash apply stash@{0} 
# Descartar as alterações que estão escondidas
git stash drop stash@{0} 

# Puxar arquivos do repositório central
git pull origin

# Clonar repositório
git clone <endereço>

# Alterar mensagem do ultimo commit (https://www.educative.io/edpresso/how-to-change-a-git-commit-message-after-a-push)
git commit -m "New message" --amend 
git push --force repository-name branch-name

# Apagar os últimos 3 commits realizados mas não perder o conteúdo que foi alterado 
 git reset --soft HEAD~3 

# Renomear vários commits de forma interativa
Git rebase -i

# Remover arquivo único do STAGE (pronto para commit)
Git reset -- <nome-do-arquivo>
Git reset --         (tira todos)

# Adicionar arquivos de forma interativa 
Git add -i

# Múltiplos commit de um único arquivo, cada alteração fazer em um commit diferente
Git add -p

# Reservar diretório vazio, git trabalha com conteúdo, por isso pastas vazias não sobem. Criar arquivo
.gitkeep

git reset --soft HEAD~1 
git rm -r --cached .

git tag -a v0.1.0 -m "my version 1.4"
git push origin --tags

################################################################################################

################################################################################################
CMAKE
################################################################################################

# Na pasta root do projeto
    cmake -S src -B build
    cmake --build build

# Na própria pasta Build
    cd build
    cmake --build .
    .\gameOO.exe


teste aaaaaa